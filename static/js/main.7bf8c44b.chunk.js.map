{"version":3,"sources":["Components/Header/Header.js","Components/Search/Editor.js","Components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","target","rel","Component","myTheme","Editor","props","includeUI","loadImage","path","image","name","theme","menu","initMenu","uiSize","width","height","menuBarPosition","cssMaxHeight","cssMaxWidth","selectionStyle","cornerSize","rotatingPointOffset","usageStatistics","Search","handleSubmit","event","preventDefault","state","query","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","setState","querySubmit","userInput","performSearch","axios","method","url","params","client_id","then","results","console","log","data","total","images","imageChosen","handleUserInput","value","handleImageClick","src","photoQualityRegular","imageQuality","photoQualityFull","onClick","this","action","onSubmit","htmlFor","type","id","placeholder","onChange","aria-label","map","key","urls","full","alt","alt_description","regular","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7bf8c44b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"wrapper title\">\r\n        <h1>ðŸ–¼Lorem Editsum  <a href=\"w\" target=\"_blank\" rel=\"noopener noreferrer\">by MM</a></h1>\r\n        <p>Ever want a quick way to find a relevant placeholder image and be able to edit it.</p>\r\n        <p>Now you can with Lorem Editsum. Find an image, click and edit away!</p>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport 'tui-image-editor/dist/tui-image-editor.css'\r\nimport ImageEditor from '@toast-ui/react-image-editor'\r\n\r\n\r\nconst myTheme = {\r\n    // Theme object to extends default dark theme.\r\n};\r\n\r\nconst Editor = (props) => {\r\n    return (\r\n        <ImageEditor\r\n            includeUI={{\r\n                loadImage: {\r\n                    path: props.image,\r\n                    name: 'SampleImage'\r\n                },\r\n                theme: myTheme,\r\n                menu: ['shape', 'filter'],\r\n                initMenu: 'filter',\r\n                uiSize: {\r\n                    width: '100%',\r\n                    height: '700px'\r\n                },\r\n                menuBarPosition: 'bottom'\r\n            }}\r\n            cssMaxHeight={500}\r\n            cssMaxWidth={700}\r\n            selectionStyle={{\r\n                cornerSize: 20,\r\n                rotatingPointOffset: 70\r\n            }}\r\n            usageStatistics={true}\r\n            className=\"ImageSpacing\"\r\n        />\r\n    );\r\n    \r\n}\r\n\r\nexport default Editor;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport 'tui-image-editor/dist/tui-image-editor.css'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Editor from './Editor.js'\r\n\r\n// const API_KEY = process.env.REACT_APP_UNSPLASH_API_KEY;\r\n\r\nclass Search extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n          query: \"\",\r\n          images:[],\r\n          querySubmit:\"\",\r\n          imageChosen:\"\",\r\n          imageQuality:\"\"\r\n        };\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.query === \"\") {\r\n            toast.error('No input detected âŒ¨ ðŸª“', {\r\n                position: \"bottom-center\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: false,\r\n                progress: undefined,\r\n                className: 'toast-alert',\r\n            });\r\n        } else {\r\n            this.setState({\r\n                querySubmit: this.state.query\r\n            })\r\n            if (this.state.userInput !== \"\") {\r\n                this.setState({\r\n                    query: ''\r\n                }, () => this.performSearch())\r\n            }\r\n        }\r\n    }\r\n    \r\n    performSearch =() => {\r\n        axios({\r\n            method: \"GET\",\r\n            url: `https://api.unsplash.com/search/photos`,\r\n            params: {\r\n                client_id: `yF191mMX1BOr1RZhtWzXK7e6mPRcKr930GQ9UxhkvJ4`,\r\n                query: this.state.querySubmit\r\n            },\r\n        }).then((results) => {\r\n            console.log(results)\r\n            if (results.data.total === 0) {\r\n                toast.error('No results found for your query', {\r\n                    position: \"bottom-center\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: false,\r\n                    progress: undefined,\r\n                    className: 'toast-alert',\r\n                });\r\n            }\r\n            else {\r\n            this.setState({\r\n                images: results.data.results,\r\n                imageChosen: \"\",\r\n            });\r\n            }\r\n        });\r\n    }\r\n\r\n    handleUserInput = (event) => {\r\n        this.setState({\r\n            query: event.target.value,\r\n        })\r\n    }\r\n    handleImageClick = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            imageChosen: event.target.src\r\n        })\r\n        \r\n    }\r\n    photoQualityRegular = () => {\r\n        this.setState({\r\n            imageQuality:\"regular\"\r\n        })\r\n        toast.error('Image quality changed to RegularðŸ˜Œ', {\r\n            position: \"bottom-center\",\r\n            autoClose: 1000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n            className: 'toast-alert',\r\n        });\r\n    }\r\n    photoQualityFull = () => {\r\n        this.setState({\r\n            imageQuality:\"full\"\r\n        })\r\n        toast.error('Image quality changed to Full! Gonna be HUGE!ðŸ¤ª', {\r\n            position: \"bottom-center\",\r\n            autoClose: 1000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            progress: undefined,\r\n            className: 'toast-alert',\r\n        });\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div>\r\n              <p className=\"qualityText\">Change Picture Quality (Default is Regular)</p>\r\n                <div>\r\n                    <button className=\"qualityButton\" onClick={this.photoQualityFull}>Full</button>\r\n                    <button className=\"qualityButton\" onClick={this.photoQualityRegular}>Regular/Default</button>\r\n                </div>\r\n              <form action=\"\" onSubmit={this.handleSubmit}>\r\n                  <label htmlFor=\"queryName\" className=\"visuallyHidden\">enter query:</label>\r\n                  <input type=\"text\" id=\"queryName\" name=\"queryName\" placeholder=\"Search for an image to edit!\" value={this.state.userInput}\r\n                      onChange={this.handleUserInput} />\r\n                  <button type=\"submit\" id=\"queryButton\" aria-label=\"submit search\">?</button>\r\n              </form>\r\n            </div>\r\n            <ToastContainer />\r\n        {this.state.imageChosen !== \"\" ?\r\n                <Editor image={this.state.imageChosen} />\r\n                : (this.state.imageQuality === \"full\") ?\r\n                <div className=\"imageGrid\">\r\n                {this.state.images.map((image) => {\r\n                    return (\r\n                        <div className=\"imageContainer\">\r\n                            <img\r\n                                onClick={this.handleImageClick}\r\n                                key={`${image.id}`}\r\n                                id={`${image.id}`}\r\n                                src={`${image.urls.full}`}\r\n                                alt={`${image.alt_description}`}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            :\r\n                    <div className=\"imageGrid\">\r\n                        {this.state.images.map((image) => {\r\n                            return (\r\n                                <div className=\"imageContainer\">\r\n                                    <img\r\n                                        onClick={this.handleImageClick}\r\n                                        key={`${image.id}`}\r\n                                        id={`${image.id}`}\r\n                                        src={`${image.urls.regular}`}\r\n                                        alt={`${image.alt_description}`}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n            }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport Header from './Components/Header/Header.js'\nimport Search from './Components/Search/Search.js'\n\nimport './App.css';\n\nfunction App() {\n  return (    \n    <div className=\"AppWrapper\">\n      <Header />\n\n      <div className=\"ContentWrapper\">\n      <Search />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}